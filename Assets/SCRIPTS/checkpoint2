using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using System.Collections;

public class DeckManager : MonoBehaviour
{
    public int playerChips = 1000;
    public int[] botChips = { 1000, 1000, 1000, 1000 };
    public int potSize = 0;
    public int minimumBet = 50;
    public int currentBet = 0;

    private bool[] botActive = { true, true, true, true };

    // UI references
    public TextMeshProUGUI potText;
    public TextMeshProUGUI playerChipsText;
    public TextMeshProUGUI[] botChipsTexts;
    public TextMeshProUGUI turnIndicatorText;

    public int smallBlind = 50;
    public int bigBlind = 100;
    private int dealerIndex = 0;
    private int smallBlindIndex;
    private int bigBlindIndex;

    private int smallBlindPlayer = 0;
    private int bigBlindPlayer = 1;
    public TextMeshProUGUI smallBlindText;
    public TextMeshProUGUI bigBlindText;

    public TextMeshProUGUI CurrentSmall;
    public TextMeshProUGUI CurrentBigBlind;

    public TextMeshProUGUI moveHistoryText;

    private int currentPlayerIndex = 0;
    private bool bettingRoundInProgress = false;

    public class Card
    {
        public string Suit { get; private set; }
        public string Rank { get; private set; }

        public Card(string suit, string rank)
        {
            Suit = suit;
            Rank = rank;
        }
    }

    public List<Card> deck = new List<Card>();

    public Image playerCard1;
    public Image playerCard2;
    public Image[] communityCards;

    [SerializeField] private Image botOneCard1;
    [SerializeField] private Image botOneCard2;
    [SerializeField] private Image botTwoCard1;
    [SerializeField] private Image botTwoCard2;
    [SerializeField] private Image botThreeCard1;
    [SerializeField] private Image botThreeCard2;
    [SerializeField] private Image botFourCard1;
    [SerializeField] private Image botFourCard2;

    public Sprite cardBack;
    public Sprite[] cardSprites;

    private int currentRound = 0;

    void Start()
    {
        CreateDeck();
        ShuffleDeck();
        DealInitialCards();
        SetBlinds();
        StartBettingRound();
    }

    void CreateDeck()
    {
        string[] suits = { "Heart", "Diamond", "Club", "Spade" };
        string[] ranks = { "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A" };

        foreach (string suit in suits)
        {
            foreach (string rank in ranks)
            {
                deck.Add(new Card(suit, rank));
            }
        }
    }

    void ShuffleDeck()
    {
        for (int i = 0; i < deck.Count; i++)
        {
            Card temp = deck[i];
            int randomIndex = Random.Range(0, deck.Count);
            deck[i] = deck[randomIndex];
            deck[randomIndex] = temp;
        }
    }

    void DealInitialCards()
    {
        playerCard1.sprite = GetCardSprite(deck[0]);
        playerCard2.sprite = GetCardSprite(deck[1]);

        botOneCard1.sprite = cardBack;
        botOneCard2.sprite = cardBack;

        botTwoCard1.sprite = cardBack;
        botTwoCard2.sprite = cardBack;

        botThreeCard1.sprite = cardBack;
        botThreeCard2.sprite = cardBack;

        botFourCard1.sprite = cardBack;
        botFourCard2.sprite = cardBack;

        for (int i = 0; i < 10; i++)
        {
            deck.RemoveAt(0);
        }

        for (int i = 0; i < 5; i++)
        {
            communityCards[i].sprite = cardBack;
            deck.RemoveAt(0);
        }
    }

    Sprite GetCardSprite(Card card)
    {
        string cardName = card.Rank + "_" + card.Suit.ToLower();

        foreach (var sprite in cardSprites)
        {
            if (sprite.name == cardName)
            {
                return sprite;
            }
        }

        return cardBack;
    }

    void SetBlinds()
    {
        smallBlindIndex = (dealerIndex + 1) % 5;
        bigBlindIndex = (dealerIndex + 2) % 5;

        if (smallBlindIndex == 0)
        {
            playerChips -= smallBlind;
            potSize += smallBlind;
        }
        else
        {
            botChips[smallBlindIndex - 1] -= smallBlind;
            potSize += smallBlind;
        }

        if (bigBlindIndex == 0)
        {
            playerChips -= bigBlind;
            potSize += bigBlind;
            currentBet = bigBlind;
        }
        else
        {
            botChips[bigBlindIndex - 1] -= bigBlind;
            potSize += bigBlind;
            currentBet = bigBlind;
        }

        UpdateUI();
    }
    void StartBettingRound()
{
    currentPlayerIndex = (dealerIndex + 1) % 5; // Start with the player after the dealer
    bettingRoundInProgress = true;
    Debug.Log("Starting betting round.");
    StartNextTurn();
}

void StartNextTurn()
{
    if (AllPlayersOrBotsFolded())
    {
        Debug.Log("All but one player folded. Ending betting round.");
        bettingRoundInProgress = false;
        AdvanceGameFlow();
        return;
    }

    if (currentPlayerIndex == 0)
    {
        turnIndicatorText.text = "Player's Turn";
        Debug.Log("Player's turn to act.");
    }
    else
    {
        turnIndicatorText.text = $"Bot {currentPlayerIndex}'s Turn";
        BotAction(currentPlayerIndex);
    }

    currentPlayerIndex = (currentPlayerIndex + 1) % 5; // Move to the next player
}

bool AllPlayersOrBotsFolded()
{
    int activePlayers = botActive.Length;
    if (playerChips > 0) activePlayers++;
    foreach (bool bot in botActive)
    {
        if (!bot) activePlayers--;
    }

    return activePlayers <= 1;
}




    public void PlayerFolded()
    {
        Debug.Log("Player folded. Skipping turn.");
        AdvanceGameFlow();
    }

    public void PlayerCalled()
    {
        Debug.Log("Player called.");
        if (playerChips >= currentBet)
        {
            playerChips -= currentBet;
            potSize += currentBet;
            UpdateUI();
        }
        else
        {
            Debug.Log("Player doesn't have enough chips to call.");
        }
    }

public void PlayerRaise(int raiseAmount)
{
    if (raiseAmount > 0 && playerChips >= raiseAmount)
    {
        currentBet += raiseAmount;
        playerChips -= raiseAmount;
        potSize += raiseAmount;
        Debug.Log($"Player raises to {currentBet}.");
        UpdateUI();
    }
    else
    {
        Debug.LogError("Invalid raise amount!");
    }
}



    public void AdvanceGameFlow()
    {
        Debug.Log("Advancing game flow.");
        if (currentRound == 0)
        {
            RevealFlop();
        }
        else if (currentRound == 1)
        {
            RevealTurn();
        }
        else if (currentRound == 2)
        {
            RevealRiver();
        }
        else
        {
            PerformShowdown();
        }

        currentRound++;
    }

    public void ExecuteWithDelay(float delay, System.Action action)
    {
        StartCoroutine(WaitForAction(delay, action));
    }

    private IEnumerator WaitForAction(float seconds, System.Action action)
    {
        yield return new WaitForSeconds(seconds);
        action.Invoke();
    }

    void PerformShowdown()
    {
        Debug.Log("Showdown logic.");
        // Placeholder for comparing hands and determining winner
    }

    public void UpdateUI()
    {
        potText.text = "Pot: $" + potSize;
        playerChipsText.text = "$" + playerChips;

        for (int i = 0; i < botChips.Length; i++)
        {
            botChipsTexts[i].text = "$" + botChips[i];
        }
    }

    void RevealFlop()
    {
        communityCards[0].sprite = GetCardSprite(deck[0]);
        communityCards[1].sprite = GetCardSprite(deck[1]);
        communityCards[2].sprite = GetCardSprite(deck[2]);
    }

    void RevealTurn()
    {
        communityCards[3].sprite = GetCardSprite(deck[3]);
    }

    void RevealRiver()
    {
        communityCards[4].sprite = GetCardSprite(deck[4]);
    }
}
